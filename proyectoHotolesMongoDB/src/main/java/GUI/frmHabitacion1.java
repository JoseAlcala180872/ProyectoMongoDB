/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Dominio.Cliente;
import Dominio.Habitacion;
import Dominio.Hotel;
import Dominio.Reservacion;
import Excepciones.BOException;
import Negocio.HabitacionBO;
import java.time.LocalDate;
import java.time.Period;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author YeisiPC
 */
public class frmHabitacion1 extends javax.swing.JFrame {

    private JPanel errorPanel;
    private final HabitacionBO habitacionBO;
    private Hotel hotelSeleccionado;
    private Cliente clienteRegistrado;
    private Reservacion reservacion = new Reservacion();

    /**
     * Creates new form frmHabitacion
     *
     * @param clienteRegistrado
     * @param hotelSeleccionado
     */
    public frmHabitacion1(Cliente clienteRegistrado, Hotel hotelSeleccionado) {
        initComponents();
        this.clienteRegistrado = clienteRegistrado;
        this.hotelSeleccionado = hotelSeleccionado;
        habitacionBO = new HabitacionBO();
        this.cargarDatosEnTabla();
    }

    /**
     *
     */
    public void cargarDatosEnTabla() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Numero de Habitacion");
        model.addColumn("Tipo de Habitacion");
        model.addColumn("Tarifa");
        try {
            List<Habitacion> habitaciones = habitacionBO.obtenerHabitacionsSinAsignar(hotelSeleccionado);

            for (Habitacion habitacion : habitaciones) {
                Object[] rowData = new Object[]{
                    habitacion.getNumeroHabitacion(),
                    habitacion.getTipoHabitacion(),
                    habitacion.getTarifa(),
                    habitacion.getHotel() != null ? habitacion.getHotel() : "N/A"
                };
                model.addRow(rowData);
            }

            tablaHabitacion.setModel(model);

        } catch (BOException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        calendarioFechaInicial = new com.github.lgooddatepicker.components.CalendarPanel();
        calendarioFechaFinal = new com.github.lgooddatepicker.components.CalendarPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaHabitacion = new javax.swing.JTable();
        btnReservar = new javax.swing.JButton();
        btnCalcular = new javax.swing.JButton();
        lblDias = new javax.swing.JLabel();
        lblPrecio = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Fecha Inicial:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 360, -1, -1));
        jPanel1.add(calendarioFechaInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 400, -1, -1));
        jPanel1.add(calendarioFechaFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 400, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Fecha Final:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 360, -1, -1));

        tablaHabitacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaHabitacion);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 530, 280));

        btnReservar.setContentAreaFilled(false);
        btnReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservarActionPerformed(evt);
            }
        });
        jPanel1.add(btnReservar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 633, 130, 30));

        btnCalcular.setContentAreaFilled(false);
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalcular, new org.netbeans.lib.awtextra.AbsoluteConstraints(555, 633, 120, 30));

        lblDias.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblDias.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(lblDias, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 690, 90, -1));

        lblPrecio.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPrecio.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(lblPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 690, 120, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pantallaSeleccionarHabitacion.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnReservarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservarActionPerformed
        // TODO add your handling code here:
        try {
            int indiceHabitacion = tablaHabitacion.getSelectedRow();

            if (indiceHabitacion == -1) {
                mostrarError("Selecciona una habitación para reservar.");
                return;
            }

            LocalDate fechaActual = LocalDate.now();
            LocalDate fechaInicial = calendarioFechaInicial.getSelectedDate();
            LocalDate fechaFinal = calendarioFechaFinal.getSelectedDate();

            if (fechaInicial.isBefore(fechaActual) || fechaFinal == null || fechaFinal.isBefore(fechaInicial) || fechaFinal.isEqual(fechaInicial)) {
                mostrarError("La fecha inicial no puede ser anterior a la fecha actual y la fecha final debe ser posterior a la fecha inicial y no puede ser igual.");
                return;
            }

            // Nueva verificación para no permitir reservas días antes de la fecha actual
            if (fechaInicial.isBefore(fechaActual)) {
                mostrarError("No puedes reservar para fechas anteriores a la fecha actual.");
                return;
            }

            // Adding a check for the year to ensure reservations are not made too far in the future
            int maxReservationYear = 5; // You can adjust this value based on your requirements
            if (fechaInicial.getYear() > fechaActual.getYear() + maxReservationYear || fechaFinal.getYear() > fechaActual.getYear() + maxReservationYear) {
                mostrarError("No puedes reservar para fechas demasiado lejanas en el futuro.");
                return;
            }

            String numeroHabitacion = tablaHabitacion.getValueAt(indiceHabitacion, 0).toString();
            Habitacion habitacionSeleccionada = habitacionBO.buscar(Integer.parseInt(numeroHabitacion));
            reservacion.setTarifa(calcularTarifa());
            reservacion.setCategoriaHotel(this.hotelSeleccionado);
            reservacion.setClaseHabitacion(habitacionSeleccionada);
            reservacion.setPeriodoEstancia(obtenerPeriodo());
            reservacion.getClaseHabitacion().setIsAsignado(true);
            reservacion.setCliente(this.clienteRegistrado);
            habitacionBO.actualizar(reservacion.getClaseHabitacion());
            new frmReporteDeReservacion1(this.reservacion).setVisible(true);
            this.dispose();
        } catch (BOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnReservarActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        // TODO add your handling code here:
        try {
            int indiceHabitacion = tablaHabitacion.getSelectedRow();

            if (indiceHabitacion == -1) {
                mostrarError("Selecciona una habitación antes de calcular la tarifa.");
                return;
            }

            System.out.println("Estoy aqui");
            obtenerPeriodo();
            calcularTarifa();

            // Resto del código
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnCalcularActionPerformed

    /**
     * @return
     */
    public Integer obtenerPeriodo() {
        LocalDate fechaSeleccionadaInicial = calendarioFechaInicial.getSelectedDate();
        LocalDate fechaSeleccionadaFinal = calendarioFechaFinal.getSelectedDate();

        int dia, mes, año;
        dia = fechaSeleccionadaInicial.getDayOfMonth();
        mes = fechaSeleccionadaInicial.getMonthValue();
        año = fechaSeleccionadaInicial.getYear();

        LocalDate diaInicial = LocalDate.of(año, mes, dia);

        LocalDate diaFinal = LocalDate.of(fechaSeleccionadaFinal.getYear(),
                fechaSeleccionadaFinal.getMonthValue(),
                fechaSeleccionadaFinal.getDayOfMonth());

        Period periodo = Period.between(diaInicial, diaFinal);

        lblDias.setText(String.valueOf(periodo.getDays()));
        return periodo.getDays();
    }

    /**
     *
     * @return
     */
    public double calcularTarifa() {
        // Verificar si el hotel está seleccionado
        if (hotelSeleccionado == null) {
            mostrarError("Selecciona un hotel antes de calcular la tarifa.");
            return 0.0; // Otra opción es lanzar una excepción o manejar el error de otra manera
        }

        // Verificar las fechas
        LocalDate fechaActual = LocalDate.now();
        LocalDate fechaInicial = calendarioFechaInicial.getSelectedDate();
        LocalDate fechaFinal = calendarioFechaFinal.getSelectedDate();

        if (fechaInicial == null || fechaFinal == null || fechaInicial.isBefore(fechaActual) || fechaFinal.isBefore(fechaInicial) || fechaFinal.isEqual(fechaInicial)) {
            mostrarError("Verifica las fechas para calcular la tarifa.");
            return 0.0; // Otra opción es lanzar una excepción o manejar el error de otra manera
        }

        Integer dias = this.obtenerPeriodo();
        int indiceHabitacion = tablaHabitacion.getSelectedRow();

        double tarifa = Double.parseDouble(tablaHabitacion.getValueAt(indiceHabitacion, 2).toString());

        double precioNeto = tarifa * dias;

        lblPrecio.setText(String.valueOf(precioNeto));
        System.out.println("" + precioNeto + dias);
        return precioNeto;
    }

    /**
     *
     * @param mensaje
     */
    private void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(errorPanel, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnReservar;
    private com.github.lgooddatepicker.components.CalendarPanel calendarioFechaFinal;
    private com.github.lgooddatepicker.components.CalendarPanel calendarioFechaInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDias;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JTable tablaHabitacion;
    // End of variables declaration//GEN-END:variables

}

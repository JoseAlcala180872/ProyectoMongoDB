/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import Dominio.AgenciaDeViajes;
import Dominio.Cliente;
import Excepciones.BOException;
import Negocio.ClienteBO;
import Negocio.AgenciaDeViajesBO;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author YeisiPC
 */
public class frmAgenciaDeViajes extends javax.swing.JFrame {

    /**
     * Creates new form frmAgenciaDeViajes
     */
    private Cliente cliente;
    private AgenciaDeViajes agencia;
    private AgenciaDeViajesBO agenciaBO;
    private ClienteBO clienteBO;
    private String personaReservacion;
    
    public frmAgenciaDeViajes(Cliente cliente) {
        initComponents();
        this.cliente = cliente;
        this.clienteBO = new ClienteBO();
        this.agenciaBO = new AgenciaDeViajesBO();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPersona = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Persona a quien reserva:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Nombre:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Dirección:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Teléfono:");

        txtPersona.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        txtNombre.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        txtDireccion.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        txtTelefono.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Agencia de viajes");

        btnRegistrar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPersona, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                            .addComponent(txtNombre)
                            .addComponent(txtDireccion)
                            .addComponent(txtTelefono)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnRegistrar)
                .addGap(133, 133, 133))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(btnRegistrar)
                .addGap(24, 24, 24))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
         try{
            String nombre = txtNombre.getText();
            String direccion = txtDireccion.getText();
            String telefono = txtTelefono.getText();
            String personaReservacion = txtPersona.getText();
            
            if(validacionNombre(nombre)!= null && validacionNombre(personaReservacion)!= null){
                if(validacionTelefono(telefono)!= null){
                    if(validacionDireccion(direccion) != null){
                    if(validacionCliente(nombre) == null){
                        this.cliente.setNombre(validacionNombre(nombre));
                        this.cliente.setDireccion(validacionDireccion(direccion));
                        this.cliente.setTelefono(validacionTelefono(telefono));
                        this.personaReservacion = validacionNombre(personaReservacion);
                        this.cliente = obtenerAgencia(this.cliente, this.personaReservacion);

                        frmHotel hotelFrame = new frmHotel(this.cliente);

                        hotelFrame.setVisible(true);
                        this.dispose();
                    }else{
                        JOptionPane.showMessageDialog(null, "La agencia ya existe");
                        this.cliente = validacionCliente(nombre);
                        new frmHotel(this.cliente).setVisible(true);
                        this.dispose();
                    }
                }else{
                        mostrarError("No campos vacíos", "Error", "Error al registrar");
                    }  
                }else{
                    mostrarError("Solo puedes poner números en el teléfono, máximo 16 digitos. No campos vacíos", "Error", "Error al registrar");
                }
            }else{
                 mostrarError("Solo puedes poner letras en el nombre. No campos vacíos", "Error", "Error al registrar");
            }
            
        }catch (BOException e){
            Logger.getLogger(frmPersona.class.getName()).log(Level.SEVERE, null, e);
        }
        
    }//GEN-LAST:event_btnRegistrarActionPerformed

    /**
     * 
     * @param registrarAgencia
     * @return
     * @throws BOException 
     */
    private Cliente registrarAgencia(Cliente registrarCliente, String personaReservacion) throws BOException{
        
        try{
            Cliente clienteRegistrado = clienteBO.insertar(registrarCliente);
            this.agencia = new AgenciaDeViajes(clienteRegistrado.getNombre(), clienteRegistrado.getDireccion(), clienteRegistrado.getTelefono(), clienteRegistrado, personaReservacion);
            AgenciaDeViajes agenciaRegistrado = agenciaBO.insertar(this.agencia);
            return clienteRegistrado;
        }catch(BOException e){
            throw new BOException(e.getMessage(), e);
        }
        
        
    }
    
    /**
     * 
     * @param buscarCliente
     * @return
     * @throws BOException 
     */
    private Cliente obtenerAgencia(Cliente buscarCliente, String personaReservacion) throws BOException{
        Cliente clienteObtenido;
        try{
            clienteObtenido = registrarAgencia(buscarCliente, personaReservacion);
            clienteObtenido = clienteBO.buscar(clienteObtenido.getId());
            
            return clienteObtenido;
        }catch(BOException e){
            throw new BOException(e.getMessage(), e);
        }
       
    }
    
    /**
     * 
     * @param nombre
     * @return
     * @throws BOException 
     */
    public Cliente validacionCliente(String nombre) throws BOException{
        
        try{
            Cliente cliente = this.clienteBO.buscar(nombre);
            if(cliente != null){
                return cliente;
            }
            
        }catch(BOException e){
            throw new BOException(e.getMessage(), e);
        }
        
        return null;
    }
    
    /**
     * 
     * @param nombre
     * @return 
     */
    private String validacionNombre(String nombre) {
        
        String nombreSinEspacios = nombre.trim();
        
        // Reemplazar múltiples espacios en el medio por un solo espacio
        nombreSinEspacios = nombreSinEspacios.replaceAll("\\s+", " ");

        
        Pattern patronSoloLetras = Pattern.compile("^[a-zA-Z\\s'-]+$");
        Matcher matcher = patronSoloLetras.matcher(nombreSinEspacios);
        
        if(!nombreSinEspacios.isEmpty() && matcher.matches()){
            return nombreSinEspacios;
        }else{
            return null;
        }  
        
    }
    
     /**
     * 
     * @param direccion
     * @return 
     */
    private String validacionDireccion(String direccion){
        String direccionSinEspacios = direccion.trim();
        
        // Reemplazar múltiples espacios en el medio por un solo espacio
        direccionSinEspacios = direccionSinEspacios.replaceAll("\\s+", " ");
        
        if(!direccionSinEspacios.isEmpty()){
            return direccionSinEspacios;
        }else{
            return null;
        }
    }
    
    /**
     * 
     * @param telefono
     * @return 
     */
    private String validacionTelefono(String telefono){
        
        String telefonoSinEspacios = telefono.replaceAll("\\s", "");

        // Modificar el patrón para permitir solo números
        Pattern patronSoloNumeros = Pattern.compile("^[0-9]+$");
        Matcher matcher = patronSoloNumeros.matcher(telefonoSinEspacios);

        if(!telefonoSinEspacios.isEmpty() && matcher.matches()){
            return telefonoSinEspacios;
        }else{
            return null;
        }
     
    }
    
    /**
     * 
     * @param mensaje
     * @param tipo
     * @param titulo 
     */
    public void mostrarError(String mensaje, String tipo, String titulo) {
        JOptionPane optionPane = new JOptionPane(mensaje);
        if (tipo.equals("Info")) {
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        } else if (tipo.equals("Error")) {
            optionPane.setMessageType(JOptionPane.ERROR_MESSAGE);
        }
        JDialog dialog = optionPane.createDialog(titulo);
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
    }
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPersona;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}

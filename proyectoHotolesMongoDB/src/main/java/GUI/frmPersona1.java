/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Dominio.Cliente;
import Dominio.Persona;
import Excepciones.BOException;
import Negocio.ClienteBO;
import Negocio.PersonaBO;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 * Clase que representa el formulario 'frmPersona1'. Este formulario se utiliza
 * para registrar información personal.
 */
public class frmPersona1 extends javax.swing.JFrame {

    private Cliente cliente;
    private Persona persona;
    private ClienteBO clienteBO;
    private PersonaBO personaBO;

    /**
     * Constructor de la clase 'frmPersona1'. Inicializa y muestra los
     * componentes gráficos del formulario.
     *
     * @param cliente Cliente asociado a la persona.
     */
    public frmPersona1(Cliente cliente) {
        initComponents();
        this.clienteBO = new ClienteBO();
        this.personaBO = new PersonaBO();
        this.cliente = cliente;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtTelefono = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        btnRegistrar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtTelefono.setBackground(new java.awt.Color(255, 255, 255));
        txtTelefono.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtTelefono.setForeground(new java.awt.Color(0, 0, 0));
        txtTelefono.setBorder(null);
        jPanel1.add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 240, 300, -1));

        txtNombre.setBackground(new java.awt.Color(255, 255, 255));
        txtNombre.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(0, 0, 0));
        txtNombre.setBorder(null);
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 120, 305, 28));

        txtDireccion.setBackground(new java.awt.Color(255, 255, 255));
        txtDireccion.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtDireccion.setForeground(new java.awt.Color(0, 0, 0));
        txtDireccion.setBorder(null);
        jPanel1.add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 183, 300, -1));

        btnRegistrar.setContentAreaFilled(false);
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 333, 190, 70));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pantallaRegistrarPersona.png"))); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
     * Maneja el evento de clic en el botón "btnRegistrar". Realiza la
     * validación de la información ingresada (nombre, dirección, teléfono) y
     * registra la persona asociada al cliente.
     *
     * @param evt Objeto que representa el evento de acción (clic en el botón).
     */
    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        try {
            String nombre = txtNombre.getText();
            String direccion = txtDireccion.getText();
            String telefono = txtTelefono.getText();

            if (validacionNombre(nombre) != null) {
                if (validacionTelefono(telefono) != null) {
                    if (validacionDireccion(direccion) != null) {
                        if (validacionCliente(nombre) == null) {

                            this.cliente.setNombre(validacionNombre(nombre));
                            this.cliente.setDireccion(direccion);
                            this.cliente.setTelefono(validacionTelefono(telefono));

                            this.cliente = obtenerPersona(this.cliente);

                            frmHotel1 hotelFrame = new frmHotel1(this.cliente);

                            hotelFrame.setVisible(true);
                            this.dispose();

                        } else {
                            JOptionPane.showMessageDialog(null, "La persona ya existe");
                            this.cliente = validacionCliente(nombre);
                            new frmHotel1(this.cliente).setVisible(true);
                            this.dispose();
                        }
                    } else {
                        mostrarError("No campos vacíos", "Error", "Error al registrar");
                    }
                } else {
                    mostrarError("Solo puedes poner números en el teléfono, máximo 16 digitos. No campos vacíos", "Error", "Error al registrar");
                }
            } else {
                mostrarError("Solo puedes poner letras en el nombre. No campos vacíos", "Error", "Error al registrar");
            }

        } catch (BOException e) {
            Logger.getLogger(frmPersona1.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    /**
     * Registra la persona en la base de datos.
     *
     * @param registrarCliente Cliente a registrar.
     * @return Cliente registrado.
     * @throws BOException Excepción lanzada en caso de error en la lógica de
     * negocios.
     */
    private Cliente registrarPersona(Cliente registrarCliente) throws BOException {

        try {
            Cliente clienteRegistrado = clienteBO.insertar(registrarCliente);
            this.persona = new Persona(clienteRegistrado.getNombre(), clienteRegistrado.getDireccion(), clienteRegistrado.getTelefono(), clienteRegistrado);
            Persona personaRegistrado = personaBO.insertar(this.persona);
            return clienteRegistrado;
        } catch (BOException e) {
            throw new BOException(e.getMessage(), e);
        }

    }

    /**
     * Obtiene la información de la persona registrada.
     *
     * @param buscarCliente Cliente a buscar.
     * @return Cliente con la información completa.
     * @throws BOException Excepción lanzada en caso de error en la lógica de
     * negocios.
     */
    private Cliente obtenerPersona(Cliente buscarCliente) throws BOException {
        Cliente clienteObtenido;
        try {
            clienteObtenido = registrarPersona(buscarCliente);
            clienteObtenido = clienteBO.buscar(clienteObtenido.getId());

            return clienteObtenido;
        } catch (BOException e) {
            throw new BOException(e.getMessage(), e);
        }

    }

    /**
     * Valida si el cliente ya existe en la base de datos.
     *
     * @param nombre Nombre del cliente.
     * @return Cliente existente o null si no existe.
     * @throws BOException Excepción lanzada en caso de error en la lógica de
     * negocios.
     */
    public Cliente validacionCliente(String nombre) throws BOException {

        try {
            Cliente cliente = this.clienteBO.buscar(nombre);
            if (cliente != null) {
                return cliente;
            }

        } catch (BOException e) {
            throw new BOException(e.getMessage(), e);
        }

        return null;
    }

    /**
     * Valida el nombre ingresado.
     *
     * @param nombre Nombre a validar.
     * @return Nombre válido o null si es inválido.
     */
    private String validacionNombre(String nombre) {

        String nombreSinEspacios = nombre.trim();

        // Reemplazar múltiples espacios en el medio por un solo espacio
        nombreSinEspacios = nombreSinEspacios.replaceAll("\\s+", " ");

        Pattern patronSoloLetras = Pattern.compile("^[a-zA-Z\\s'-]+$");
        Matcher matcher = patronSoloLetras.matcher(nombreSinEspacios);

        if (!nombreSinEspacios.isEmpty() && matcher.matches()) {
            return nombreSinEspacios;
        } else {
            return null;
        }

    }

    /**
     * Valida la dirección ingresada.
     *
     * @param direccion Dirección a validar.
     * @return Dirección válida o null si es inválida.
     */
    private String validacionDireccion(String direccion) {
        String direccionSinEspacios = direccion.trim();

        // Reemplazar múltiples espacios en el medio por un solo espacio
        direccionSinEspacios = direccionSinEspacios.replaceAll("\\s+", " ");

        if (!direccionSinEspacios.isEmpty()) {
            return direccionSinEspacios;
        } else {
            return null;
        }
    }

    /**
     * Valida el teléfono ingresado.
     *
     * @param telefono Teléfono a validar.
     * @return Teléfono válido o null si es inválido.
     */
    private String validacionTelefono(String telefono) {

        String telefonoSinEspacios = telefono.replaceAll("\\s", "");

        // Modificar el patrón para permitir solo números
        Pattern patronSoloNumeros = Pattern.compile("^[0-9]+$");
        Matcher matcher = patronSoloNumeros.matcher(telefonoSinEspacios);

        if (!telefonoSinEspacios.isEmpty() && matcher.matches()) {
            return telefonoSinEspacios;
        } else {
            return null;
        }

    }

    /**
     * Muestra un cuadro de diálogo con un mensaje de error o información.
     *
     * @param mensaje Mensaje a mostrar.
     * @param tipo Tipo de mensaje ("Error" o "Info").
     * @param titulo Título del cuadro de diálogo.
     */
    public void mostrarError(String mensaje, String tipo, String titulo) {
        JOptionPane optionPane = new JOptionPane(mensaje);
        if (tipo.equals("Info")) {
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        } else if (tipo.equals("Error")) {
            optionPane.setMessageType(JOptionPane.ERROR_MESSAGE);
        }
        JDialog dialog = optionPane.createDialog(titulo);
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
    }

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(frmPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(frmPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(frmPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(frmPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new frmPersona().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
